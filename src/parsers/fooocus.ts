import { Parser, ReplacementRules, popKeys } from './parser';
import { Generators, createPromptInfo, createSampler, createModel, createPrompt, PromptInfo } from '../data';
import { ParserError } from '../exceptions';

const SAMPLER_PARAMS = ['guidance_scale', 'cfg_scale', 'scheduler', 'seed', 'sharpness', 'steps'];

const REPLACEMENT_RULES: ReplacementRules = [['guidance_scale', 'cfg_scale']];

/**
 * Parser for images generated by Fooocus
 */
export class FooocusParser extends Parser {
  public readonly generator = Generators.FOOOCUS;

  async parse(_parameters: Record<string, any>): Promise<PromptInfo> {
    let parameters: Record<string, any>;
    
    try {
      if (!_parameters.hasOwnProperty('parameters')) {
        throw new Error('parameters field is missing');
      }
      
      if (typeof _parameters.parameters === 'string') {
        parameters = JSON.parse(_parameters.parameters);
      } else if (typeof _parameters.parameters === 'object' && _parameters.parameters !== null) {
        throw new Error('parameters field is missing');
      } else {
        throw new Error('parameters field is missing');
      }
    } catch (error) {
      throw new ParserError(`Error decoding parameter data: ${error}`);
    }

    try {
      const model = (parameters.base_model || parameters.base_model_hash) ? 
        createModel({
          name: parameters.base_model,
          hash: parameters.base_model_hash
        }) : undefined;
      delete parameters.base_model;
      delete parameters.base_model_hash;

      const samplerParams = Object.fromEntries(popKeys(SAMPLER_PARAMS, parameters));
      const normalizedParams = this.normalizeParameters(samplerParams, REPLACEMENT_RULES);

      const samplerName = parameters.sampler || 'unknown';
      delete parameters.sampler;

      const prompt = parameters.prompt;
      delete parameters.prompt;

      const negativePrompt = parameters.negative_prompt;
      delete parameters.negative_prompt;

      const prompts = prompt ? [createPrompt(prompt)] : [];
      const negativePrompts = negativePrompt ? [createPrompt(negativePrompt)] : [];

      const sampler = createSampler(samplerName, normalizedParams, {
        model,
        prompts,
        negativePrompts
      });

      return createPromptInfo(this.generator, [sampler], parameters, _parameters);
    } catch (error) {
      throw new ParserError(`Error reading parameter value: ${error}`);
    }
  }
}
